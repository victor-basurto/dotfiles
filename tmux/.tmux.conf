set -sg escape-time 0
# Set the prefix key to Ctrl-a (instead of Ctrl-b)
# This is a common preference as Ctrl-b can conflict with other keybindings (e.g., in Vim/Neovim)
set -g prefix C-a
unbind C-b # Unbind the default prefix key
bind C-a send-prefix # Send the prefix key to the application if pressed twice

# Reload the tmux configuration file with Ctrl-a r
bind r source-file ~/.tmux.conf \; display-message "tmux config reloaded!"

# Enable mouse support
# This allows you to click to select panes, resize them, and scroll with the mouse wheel
set -g mouse on

# Set the base index for windows and panes to 1 instead of 0
# This makes it more intuitive to switch between windows (e.g., Ctrl-a 1, Ctrl-a 2)
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on # Renumber windows when one is closed

# Improve pane navigation with Vi-like keys
# Use Ctrl-a h/j/k/l to move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes with Vi-like keys
# Use Ctrl-a H/J/K/L to resize panes
# bind H resize-pane -L 5
# bind J resize-pane -D 5
# bind K resize-pane -U 5
# bind L resize-pane -R 5
# Instead of using Ctrl-a H/J/K/L to resize panes
# Use alt (windows/linux) option (max) along with (h,,j,k,l)
bind -n M-h resize-pane -L 5
bind -n M-j resize-pane -D 5
bind -n M-k resize-pane -U 5
bind -n M-l resize-pane -R 5

# Split panes with more intuitive keys
# Use Ctrl-a | for vertical split and Ctrl-a - for horizontal split
# Vertical split, new pane in current path
bind "v" split-window -h -c "#{pane_current_path}"
bind "-" split-window -v -c "#{pane_current_path}"

# Copy mode settings (Vi-like keys)
# Enter copy mode with Ctrl-a [
# setw -g mode-keys vi
# bind -T copy-mode-vi v send-keys -X begin-selection # Start selection with 'v'
# bind -T copy-mode-vi y send-keys -X copy-selection # Copy selection with 'y'
# bind -T copy-mode-vi Y send-keys -X copy-line # Copy entire line with 'Y'

# Set the default terminal to 256 colors
set -g default-terminal "screen-256color"
# Fix issues with colors in Neovim/Vim
set-option -sa terminal-features ',xterm-256color:RGB'

# Status bar customization
# Set the refresh interval for the status bar
set -g status-interval 1

# Set the position of the window list
set -g status-justify left

# Set the colors for the status bar
set -g status-bg '#333333' # Dark grey background
set -g status-fg '#ffffff' # White foreground

# Left side of the status bar (session name, window number, pane number)
set -g status-left '#[fg=green,bold]#[bg=black] #S #[fg=white]#[bg=black] #I:#P '
set -g status-left-length 40

# Right side of the status bar (date and time)
set -g status-right '#[fg=cyan,bold]#[bg=black] %Y-%m-%d %H:%M #[default]'
set -g status-right-length 40

# Highlight active window in the status bar
setw -g window-status-current-style bg=#4527a0,fg=white,bold
setw -g window-status-current-format ' #I:#W#F ' # Window index, window name, flags

# Inactive window style
setw -g window-status-style fg=white,bg=default
setw -g window-status-format ' #I:#W#F '

# Message style
set -g message-style fg=white,bg=black,bold

# Pane border colors
set -g pane-border-style fg=green # Green border for inactive panes
set -g pane-active-border-style fg=blue # Blue border for active pane

# History limit
set -g history-limit 10000 # Increase scrollback buffer

# Automatic renaming of windows
set -g automatic-rename on
set -g automatic-rename-format '#{pane_current_command}' # Name windows after the running command

# Smart pane switching with 'vim-tmux-navigator' like behavior (requires plugin or manual setup)
# This allows seamless navigation between tmux panes and Vim/Neovim splits using Ctrl-h/j/k/l
# If you use Vim/Neovim, consider installing 'christoomey/vim-tmux-navigator' plugin.
# The following lines are for manual integration if you don't use the plugin:
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep

# Yazi configuration
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM
